
from dataclasses import dataclass
import numpy as np


def logg_data(path: str, items: list[list]) -> None:
    """

    :param path: Name of a file, with or without an extension
    :param items: list of angle/angle velocity, voltage, time
    :return:
    """
    if not path.endswith(".csv"):
        path += ".csv"

    with open(path, "a") as logg:
        for (a, v, t) in zip(*items):
            logg.write(f"{a},{v},{t}\n")

@dataclass
class EncoderData:
    timepoint:      float
    wrist_angle:    float
    shoulder_angle: float
    wrist_power:    float
    shoulder_power: float

@dataclass
class SensorData:
    timepoint:        float
    sensorValues: list[int]

def getData():
    encoderData: list[EncoderData] = []
    sensorData: list[SensorData] = []

    with open("SystemidentificationScripts/response.txt", "r") as file:
        for line in file:
            timepoint, source, *readings = line[0:-1].split(",")
            if (source == "ROBOT"):
                print(line)
                wrist_angle, shoulder_angle, wrist_power, shoulder_power = [float(x) for x in readings][0:4]
                encData = EncoderData(float(timepoint), wrist_angle, shoulder_angle, wrist_power, shoulder_power)
                encoderData.append(encData)
            elif (source == "FORCE"):
                readings: list[str] = readings[0].split(" ")[3:]
                num = readings.count("")
                for _ in range(num): readings.remove("")

                sensData = SensorData(float(timepoint), [int(x) for x in readings[-8:]])
                sensorData.append(sensData)
    return encoderData, sensorData

def Rx(theta):
    return np.array([
        [1, 0, 0],
        [0, np.cos(theta), -np.sin(theta)],
        [0, np.sin(theta), np.cos(theta)]
    ])

def Ry(theta):
    return np.array([
        [np.cos(theta), 0, np.sin(theta)],
        [0, 1, 0],
        [-np.sin(theta), 0, np.cos(theta)],
    ])

def SensorToWorld(theta_shoulder, theta_wrist):
    return Ry(theta_wrist) @ Rx(theta_shoulder)

def SensorToWorldFromSlides(theta_shoulder, theta_wrist):
    t1 = theta_shoulder
    t2 = theta_wrist

    sin = np.sin
    cos = np.cos

    return np.matrix([
        [-sin(t2), -cos(t2), 0],
        [sin(t1) * cos(t2), -sin(t1) * sin(t2), cos(t1)],
        [-cos(t1) * cos(t2), cos(t1) * sin(t2), sin(t1)],
    ])

def getForceVector(mass, Rsw):
    return np.linalg.inv(Rsw) @ np.matrix([[0], [0], [-mass * 9.81]])

def getMassVector(rs, forceVector):
    return np.linalg.cross(rs.flatten(), forceVector.flatten())

def formatForceLabel(x):
    out = round(float(x), 2)
    return f" {out: .2f}"

def getCLQ():

    C = np.matrix([
        [-20.7056352],
        [-10.94682257],
        [-85.75310466],
        [0.666177612],
        [-1.124525726],
        [0]
    ], dtype=np.float64)

    C = np.matrix([ 5.61238642e+00,  4.10676192e+01, -1.13743179e+02, -2.44863541e+00,
      -1.01556767e-01,  0.00000000e+00], dtype=np.float64).T

    L = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, -0.034800591, 0, 0.081537818, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=float)

    L = np.matrix([[ 0.00000000e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
       -3.94942718e-03, -1.14027624e-02, -2.93822460e-04, -0.00000000e+00],
     [-0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
     0.00000000e+00,  0.00000000e+00, -0.00000000e+00,  0.00000000e+00],
    [ 0.00000000e+00,  3.02667773e-01,  0.00000000e+00,  0.00000000e+00,
      -8.68757464e-02, -0.00000000e+00, -5.32179906e-02, -0.00000000e+00],
    [ 0.00000000e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
      -0.00000000e+00, -0.00000000e+00,  0.00000000e+00, -0.00000000e+00],
    [ 0.00000000e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
      -0.00000000e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00],
    [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
    0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00]])

    Q = np.matrix([
        [0 for _ in range(36)],
        [0 for _ in range(36)],
        [0 for _ in range(36)],
        [0 for _ in range(36)],
        [0 for _ in range(36)],
        [0 for _ in range(36)],
    ])

    Q = np.array([
        [8.303163932963551e-06, 4.084041526735151e-05, -1.74e-05, -5.87e-05, 0.000145738,
         6.88502165260926e-06, 1.1445296276065211e-06, -2.82e-05, 9.385348568039113e-08,
         -3.90e-05, -2.91e-05, 4.816399716527882e-05, 6.980345797185259e-05, -3.66e-05,
         7.300908121252776e-05, -6.28e-05, 3.6667369599986744e-05, -1.30e-05,
         1.909221843678579e-05, -5.90e-05, 0.000100212, -9.27e-07, 8.102875067809789e-07,
         -0.000142259, 1.399446558577779e-05, 5.1517983203345184e-05, -6.35e-05,
         -6.79e-05, -1.20e-06, 3.6645703800398554e-05, 1.5061873097128092e-05,
         -2.91e-05, -3.84e-05, 3.211966401549622e-05, -3.53e-05, -4.09e-06],

        [-4.49e-05, -2.76e-05, -6.93e-05, 0.000215671, -1.63e-05, 4.7023545377592554e-05,
         1.5369585486471e-05, 8.910585063681673e-06, -6.69e-05, -2.67e-05,
         4.0418119802237986e-05, -1.60e-06, 1.2452275656647597e-05, 9.375489550111025e-06,
         -1.34e-05, -4.03e-05, 3.8216847242924713e-07, 4.049166505849597e-05,
         0.000102236, 9.173667533331948e-05, -9.79e-06, -6.63e-05, -2.11e-05,
         -1.81e-05, -7.34e-05, 1.758673759867887e-05, 2.8232121600719823e-05,
         9.47025511740633e-06, -5.32e-05, -3.15e-06, -5.47e-05, 4.21454444678631e-05,
         1.069130560500445e-05, -3.47e-05, -8.39e-06, -1.39e-06],

        [-7.12e-05, 0.000249476, -2.52e-05, -0.000168248, 0.000127709, -3.38e-05,
         -8.53e-05, 4.945181636273677e-05, 5.6846992056890817e-05, -7.85e-05,
         -0.000248045, 0.000146201, 0.000220532, -0.000195365, 0.000294575,
         9.975624627090282e-06, 1.9829150647291448e-05, 3.712628254217261e-05,
         -0.00013916, -0.000120166, 0.000240445, -2.63e-05, 5.032140374429566e-05,
         -6.73e-05, 0.000290598, 1.0367927543654663e-05, -0.00013575, -0.0004635,
         2.5990495985112354e-06, 0.000109802, 9.465330206548595e-05, -0.000195633,
         2.622339915751853e-05, 1.7801924240979568e-05, 1.7469555169732304e-06,
         1.9852043407008604e-05],

        [2.5585904673874928e-06, 1.499467842447408e-06, 3.959136265637444e-06,
         -1.25e-05, 1.179194333588073e-06, -2.49e-06, -1.00e-06, -5.36e-07,
         3.6074244508783862e-06, 1.6313714377789467e-06, -2.25e-06, 2.329699482728134e-07,
         -3.20e-07, -7.10e-07, 3.883108017507308e-07, 2.214049244466638e-06, 0,
         -2.18e-06, -5.77e-06, -5.04e-06, -1.12e-07, 3.940016868848068e-06,
         1.2670377857282172e-06, 8.08823025086055e-07, 4.1941534144792235e-06,
         -6.03e-07, -1.67e-06, -8.08e-07, 2.9632996552898947e-06,
         2.0869530638956308e-07, 3.24853607575415e-06, -2.27e-06, -6.03e-07,
         1.8687120232648612e-06, 6.05107698525081e-07, -1.12e-09],

        [4.9499892236892615e-08, 2.4179214552234983e-06, -8.37e-07, -3.46e-06,
         8.453626904276068e-06, 5.758327876657058e-07, 8.145844227295968e-08,
         -1.26e-06, 1.539998865159187e-07, -2.21e-06, -1.60e-06, 2.374011975069894e-06,
         3.903616365924182e-06, -1.89e-06, 3.786235570398321e-06, -3.51e-06,
         1.829246668224867e-06, -4.09e-07, 1.0558441292417284e-06, -3.24e-06,
         5.441862210766434e-06, 1.1479698483513669e-07, 8.995722261483963e-08,
         -8.08e-06, 5.799724064505313e-07, 3.141546264708808e-06, -3.79e-06,
         -3.58e-06, -7.26e-08, 1.8953760071907787e-06, 7.144495312741736e-07,
         -1.68e-06, -2.26e-06, 1.9056958158633493e-06, -2.00e-06, -2.09e-07],

        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ], dtype=float)

    Q = np.matrix([[ 1.73987260e-04, -1.35624797e-04,  6.43571426e-05, -1.45377658e-04,
                     -4.10816465e-05, -1.30687187e-04,  2.28328466e-05, -5.61861218e-05,
                     5.11641350e-05,  7.25763510e-05, -4.97798997e-05, -1.26001833e-04,
                     -1.33513572e-04,  1.12134616e-05, -7.78491979e-05,  2.05571542e-04,
                     -5.61289841e-05, -1.35626959e-05,  3.11878556e-05,  1.32473853e-04,
                     -9.92152097e-05, -2.35071468e-05,  6.22724625e-05,  1.62898672e-04,
                     6.53557106e-05, -8.76957991e-05,  1.19115073e-04,  1.63985937e-05,
                     1.09842515e-04, -5.33594479e-05, -7.01605644e-05,  9.50318721e-05,
                     1.38940332e-05,  6.55616937e-05,  9.65607736e-06, -1.96450741e-05],
                   [-1.10124748e-04,  7.28563544e-05, -4.88093310e-05,  7.99035880e-05,
                   -2.05068717e-05,  2.48806141e-05, -3.74852753e-05,  3.54397046e-05,
                   2.62753975e-06, -5.27913308e-05,  2.15110289e-05,  2.33353931e-06,
                   6.06429605e-05, -5.89285289e-05,  6.07788698e-05, -8.47676509e-05,
                   2.19838377e-05, -2.32015629e-05, -1.28216337e-05, -1.48045299e-04,
                   7.68548075e-05,  4.77505018e-05, -2.33505839e-05,  6.14417195e-05,
                   -4.50042498e-05,  2.49157715e-05, -4.28737379e-05,  6.25162089e-05,
                   -2.68369309e-05,  4.94057382e-06,  4.92249459e-05, -3.30095582e-05,
                   -8.88085999e-06,  9.40903568e-06, -1.63928455e-05,  7.54842176e-06],
                  [ 5.20304539e-05,  6.81616909e-05, -1.69104334e-04,  9.56806024e-05,
                    -1.18884817e-04, -7.88602644e-05, -5.92477194e-05,  3.15157974e-05,
                    -5.09797961e-05, -1.39261463e-04,  3.50908672e-05, -2.29773946e-05,
                    -2.67172493e-05, -2.23801579e-04,  2.00913974e-04, -1.53013569e-04,
                    2.51222368e-05,  1.91838066e-05,  6.97333675e-05, -2.00608092e-04,
                    1.06630439e-04,  6.52038698e-05,  3.57179185e-05,  1.37942218e-04,
                    1.18292265e-04, -5.80611798e-05, -5.32209972e-07,  1.10866878e-04,
                    1.01265380e-04, -7.86665868e-05,  3.48489316e-05, -6.11857497e-05,
                    9.58314549e-05,  2.07647949e-05,  3.99328805e-05, -2.55590508e-05],
                    [ 6.49173014e-06, -4.18702414e-06,  2.72797961e-06, -4.57357209e-06,
                      1.15446446e-06, -1.47864755e-06,  2.25594302e-06, -2.12052376e-06,
                      -1.67559945e-07,  2.94374539e-06, -1.16434303e-06, -1.72286729e-07,
                      -3.48104168e-06,  3.22291361e-06, -3.63281672e-06,  4.89188123e-06,
                      -1.18242895e-06,  1.12768758e-06,  7.34176170e-07,  8.84877872e-06,
                      -4.31715894e-06, -2.91434228e-06,  1.25844166e-06, -3.13663797e-06,
                      2.19721293e-06, -1.25367328e-06,  2.62174063e-06, -3.36061385e-06,
                      1.35486135e-06, -1.67646898e-07, -2.81805583e-06,  1.84248367e-06,
                      3.37926954e-07, -2.71474979e-07,  7.65685577e-07, -4.16956182e-07],
                    [ 1.06932658e-05, -8.06088443e-06,  3.86337331e-06, -8.34207625e-06,
                    -2.55130455e-06, -8.22138429e-06,  1.31771813e-06, -3.45969504e-06,
                    2.92339523e-06,  4.30971947e-06, -2.78696775e-06, -7.60142175e-06,
                    -7.87550735e-06,  7.06491589e-07, -4.83666126e-06,  1.21434623e-05,
                    -3.22009598e-06, -9.12504111e-07,  1.64868881e-06,  7.85486467e-06,
                    -5.78459265e-06, -1.58866925e-06,  3.44124449e-06,  9.96906748e-06,
                    3.85481233e-06, -5.08754515e-06,  6.97623798e-06,  1.00649824e-06,
                    6.60323855e-06, -3.07893989e-06, -4.28640193e-06,  5.57293395e-06,
                    7.49266797e-07,  4.03376825e-06,  5.39339115e-07, -1.20491920e-06],
                    [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                      0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00]])

    return C, L, Q

